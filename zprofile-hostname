#!/bin/zsh -x
# .zprofile.${HOSTNAME}
################################################################################
# Host-specific Z-Shell Profile script:
#
# This file contains host-specific initialization when ZSH gets invoked as a
# "log-in" shell (see .zprofile).
#
# TODO:
# - This is not specific to certain hosts.  I don't see why I wouldn't want the
#   agent running if I have the tools on the workstation.
################################################################################
# Matt Bisson

################################################################################
# Work out the GPG details
################################################################################

# This is necessary if you use GPG for things like authentication (i.e.,
# replacing ssh-agent with gpg-agent), and your home directory lives on NFS, or
# some other shared storage.  If this is the case, drastic changes in GPGs
# behavior from version to version leads to broken functionality from one
# workstation to another, so I need to keep version-specific configuarations
# based on what I find locally.

if [ -x '/usr/bin/gpg' ] || [ -x '/usr/local/bin/gpg' ] ; then
    gpgversion=`gpg --version | grep 'gpg (GnuPG' | \
                sed 's/gpg (GnuPG[^0-9]*//' | \
                awk -F. '{ printf "%d%04d%04d", $1, $2, $3 }'`
    if [ ${gpgversion} -lt 200020000 ] ; then
        # Relegate ancient configurations to this other configuration area.
        export GNUPGHOME="${HOME}/.gnupg-2.0"
    else
        # ~/.gnupg is the default area.  For anything 2.2 and up, use it.
        export GNUPGHOME="${HOME}/.gnupg"
    fi
fi

################################################################################
# Set up the ssh-agent, possibly with GPG's gpg-agent.
#
# SSH agent avoids the normal (i.e., password-based) system login procedures
# when using any of the OpenSSH commands.  When we add public keys to the
# ~/.ssh/authorized_keys file, any SSH client that presents those public keys
# can log into the system without a system password (this is Public Key
# authentication).
#
# Password-less authentication is fine for a trusted client machine, but for
# LDAP accounts, this means that any compromised machine would be able to log in
# without a password.  Thus, we add a password to the private key, and SSH once
# again challenges clients.  SSH agent allows these private keys to become
# resident in memory on the SSH server (the destination machine), so it no
# longer requires the private key's password for every use -- just the first.
#
# To make a long story short, the script below requires a password for logging
# in, but subsequent (local) logins will be cached in the SSH agent.
################################################################################

local no_running_agent=1

if [ ${+GNUPGHOME} -ne 0 ] ; then
    # Store GPG agent environment in a host-specific area, since many computers
    # share the same home directory.  Since we assume gpg-agent.conf enables SSH
    # support, make $GPG_ENV = $SSH_ENV.
    export GPG_ENV="${GNUPGHOME}/agent-env."${HOST}
    export SSH_ENV="${GPG_ENV}"

    agent_daemon='gpg-agent'
else
    # Store SSH agent environment in a host-specific area, since many computers
    # share the same home directory.
    export SSH_ENV="${HOME}/.ssh/agent-env."${HOST}
    agent_daemon='ssh-agent'
fi

if [ -f "${SSH_ENV}" ] ; then
    # Read whatever is there -- it may be wrong.
    source "${SSH_ENV}" > /dev/null

    # Check to see if what agent we think is running, is actually running.  For
    # GPG, the PID is embedded in GPG_AGENT_INFO, but it's just plain easier to
    # get from SSH_AGENT_PID.
    if [ ${+SSH_AGENT_PID} -ne 0 ] ; then
        ps -e | grep "\\b${SSH_AGENT_PID}\\b" | grep '\b'${agent_daemon}'\b' \
            > /dev/null
        no_running_agent=$?
    fi

    # The process exists, but maybe something clobbered its IPC channel.
    if [ ! -S "${SSH_AUTH_SOCK}" ] ; then
        no_running_agent=1
    fi
fi

# Start the new agent (cleaing out the old data) if we didn't find anything
# real.
if [ $no_running_agent -ne 0 ] ; then
    if [ ${agent_daemon} = 'gpg-agent' ] ; then
        echo "Initializing new GPG/SSH agent..."
    else
        echo "Initializing new SSH agent..."
    fi

    # Rather than just banging out another process, reap any of the defunct ones
    # accounted to the current user.
    if [ -x `which killall` ] ; then
        killall -u "${USER}" -q ${agent_daemon}
    else
        echo "Cannot kill defunct ${agent_daemon} processes." 1>&2
    fi

    # Create the file first, so we don't drop potentially sensitive data
    # into a world-readable file.
    touch "${SSH_ENV}"
    chmod 600 "${SSH_ENV}"

    if [ ${agent_daemon} = 'gpg-agent' ] ; then
        gpg-agent --sh --quiet --daemon > "${SSH_ENV}"
        if [ ${gpgversion} -ge 200020000 ] && \
           [ ${gpgversion} -lt 200020041 ] ; then
            # Stomp on the SSH agent configuration after GPG 2.2 (but before
            # 2.2.41, which seems to now place files under "/run"), because it
            # no longer supports the "no-standard-socket" option, and the only
            # work-around is to add something like this to the socket file
            # (which SSH doesn't understand):
            #
            # %Assuan%
            # socket=${HOME}/.gnupg/S.gpg-agent.ssh-${HOSTNAME}

            gpg_agent_pid=`ps -x | grep '\sgpg-agent\b' | grep -v grep | \
                           awk '{print $1}'`

            # If GPG agent serves a socket through the well-known address,
            # that's what SSH is looking for.  If not, it's doing the redirect
            # mentioned above, and set SSH at the target of the redirection.
            gpg_socket="${GNUPGHOME}/S.gpg-agent"
            if [ -S "${gpg_socket}" ] ; then
                echo "SSH_AUTH_SOCK=\"${gpg_socket}.ssh\";" \
                     "export SSH_AUTH_SOCK;" > "${SSH_ENV}"
            elif [ -S "${gpg_socket}.ssh-${HOSTNAME}" ] ; then
                echo "SSH_AUTH_SOCK=\"${gpg_socket}.ssh-${HOSTNAME}\";" \
                     "export SSH_AUTH_SOCK;" > "${SSH_ENV}"
                # ...else the socket is in a non-shared area, for example
                # /var/run/user/$UID/gnupg/S.gpg-agent.ssh
            fi
            unset gpg_socket

            echo "SSH_AGENT_PID=${gpg_agent_pid}; export SSH_AGENT_PID;" \
                 >> "${SSH_ENV}"
            unset gpg_agent_pid
        fi

        source "${SSH_ENV}" > /dev/null
        unset gpgversion
    else
        ssh-agent > "${SSH_ENV}"
        source "${SSH_ENV}" > /dev/null

        # Adds any known keys into the agent instance.
        ssh-add
    fi
fi

unset agent_daemon
